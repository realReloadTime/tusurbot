import datetime as dt
import logging
import sqlite3

import telebot

con = sqlite3.connect("data/data.sqlite", check_same_thread=False)  # –∞–∫—Ç–∏–≤–∞—Ü–∏—è –î–ë
cur = con.cursor()  # –∫—É—Ä—Å–æ—Ä –î–ë –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏
roles_data = {f'{x[1]}': x[0] for x in cur.execute("""SELECT number, name FROM roles""").fetchall()}  # —Ä–æ–ª–∏ –ø—Ä–æ—Ñ–∏–ª–µ–π

logger = telebot.logger
telebot.logger.setLevel(logging.DEBUG)  # –¥–µ–±–∞–≥–≥–µ—Ä –≤ –∫–æ–Ω—Å–æ–ª–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

bot = telebot.TeleBot('7762083156:AAEO9AY1T3VBiEqiy2ehAHy0wgwSTBQkvy8')  # —Ç–æ–∫–µ–Ω https://t.me/MatAidTUSURbot

splitter = "@%$"  # –¥–µ–ª–∏—Ç–µ–ª—å —Ç–µ–∫—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –≤ —á–∞—Ç–µ
passwd = '*&TUSUR_university_MatAidBotEmployee@!**'  # –ø–∞—Ä–æ–ª—å –¥–ª—è –≤—Ö–æ–¥–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –≤ –ø—Ä–æ—Ñ–∏–ª—å

cats = [x for x in open('data/text/cats.txt', 'r', encoding='utf-8').read().split(splitter)]  # –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–∞—Ç–ø–æ–º–æ—â–∏
statuses = {1: '‚ö†Ô∏è', 2: '‚úÖ'}  # —Å—Ç–∞—Ç—É—Å—ã –≤–æ–ø—Ä–æ—Å–æ–≤

"""/
–î–∞–ª–µ–µ - –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –±–æ—Ç–∞ –ø–æ –ø–æ—Ä—è–¥–∫—É —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –≤ –∫–æ–¥–µ
start() - –Ω–∞—á–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ä–æ–ª—å—é –≤ –ë–î –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫—É —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º –º–µ–Ω—é

–õ–µ–≥–µ–Ω–¥–∞:
    -> –Ω–∏–∂–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ –∏–µ—Ä–∞—Ä—Ö–∏–∏,
    : –æ–¥–Ω–æ—É—Ä–æ–≤–Ω–µ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏,
    () —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –≤–ª–æ–∂–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (—Ç–∏–ø–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ–ø—Ä–æ—Å–∞ –∏–ª–∏ –æ—Ç–≤–µ—Ç–∞)
    
–ò–µ—Ä–∞—Ä—Ö–∏—è —Ñ—É–Ω–∫—Ü–∏–π: 
    –î–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤: 
        clicked_role_student -> student_menu 
        student_menu -> get_template : get_cats : conditions : get_info : get_mat : get_help : clear_prof
        get_template -> get_pic_template : get_file_template
        get_cats -> all_cats : family_cats : life_cats : social_cats : pay_cats
        conditions
        get_info
        get_mat
        get_help -> send_question (save_question) : memory : clean_memory
        get_msg -> close_question : send_question (save_question)
        text_compile (—É–±—Ä–∞—Ç—å –ø–æ—Å–ª–µ —Ä–µ–ª–∏–∑–∞)
    
    –î–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:
        clicked_role_employee -> employee_menu
        employee_menu -> global_send (send_global_msg) : questions_menu : student_menu : clear_prof
        global_send (send_global_msg)
        student_menu
        questions_menu -> get_questions -> get_current_question -> answer_on (save_answer) : delete_closed
        clear_prof
        
–ö–æ–Ω—Ç–∞–∫—Ç—ã –∞–≤—Ç–æ—Ä–∞: https://vk.com/m.shilko | https://t.me/realReloadTime
/"""


@bot.message_handler(commands=['start'])  # —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—Ñ–∏–ª—è (chat.id) / –≤—Ö–æ–¥, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø–∏—Å–∞–Ω –≤ –ë–î
def start(message):
    role = cur.execute("""SELECT role FROM profiles WHERE id=(?)""", (message.chat.id,)).fetchone()
    if role:  # user has role
        markup = telebot.types.InlineKeyboardMarkup()
        if role[0] == 2:
            back_button = telebot.types.InlineKeyboardButton("üí†–ú–µ–Ω—é", callback_data='employee_menu')
        else:
            back_button = telebot.types.InlineKeyboardButton("üí†–ú–µ–Ω—é", callback_data='student_menu')
        markup.add(back_button)
        send = (f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ,<b>{' ' + message.from_user.first_name if message.from_user.first_name else ''}"
                f"{' ' + message.from_user.last_name if message.from_user.last_name else ''}</b>.")

        bot.send_message(message.chat.id, send, parse_mode='html', reply_markup=markup)
    else:  # user is new
        markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1, one_time_keyboard=True)
        student_button = telebot.types.KeyboardButton("–Ø - –°—Ç—É–¥–µ–Ω—Ç")
        employee_button = telebot.types.KeyboardButton("–Ø - –°–æ—Ç—Ä—É–¥–Ω–∏–∫")
        markup.add(student_button, employee_button)
        send = (f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, <b>{message.from_user.first_name} {message.from_user.last_name}</b>!\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é —Ä–æ–ª—å, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤–∞–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª.")

        bot.send_message(message.chat.id, send, parse_mode='html', reply_markup=markup)


@bot.message_handler(func=lambda message: message.text == '–Ø - –°—Ç—É–¥–µ–Ω—Ç')  # –≤—ã–±—Ä–∞–Ω–∞ —Ä–æ–ª—å —Å—Ç—É–¥–µ–Ω—Ç
def clicked_role_student(message):
    if not cur.execute("""SELECT role FROM profiles WHERE id=?""", (message.chat.id,)).fetchone():
        cur.execute("""INSERT INTO profiles (id, role) VALUES(?, ?)""", (message.chat.id, roles_data['student']))
        con.commit()
    markup = telebot.types.InlineKeyboardMarkup(row_width=1)
    back_button = telebot.types.InlineKeyboardButton("üí†–ú–µ–Ω—é", callback_data='student_menu')
    markup.add(back_button)

    bot.send_message(message.chat.id, "–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω.", parse_mode='html', reply_markup=markup)


@bot.message_handler(func=lambda message: message.text == '–Ø - –°–æ—Ç—Ä—É–¥–Ω–∏–∫')  # –≤—ã–±—Ä–∞–Ω–∞ —Ä–æ–ª—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫
def clicked_role_employee(message):
    role = cur.execute("""SELECT role FROM profiles WHERE id=?""", (message.chat.id,)).fetchone()
    if role and int(role[0]) == 2:
        message.text = passwd
        create_employee(message)
    else:
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏–ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤—Ö–æ–¥:",
                         parse_mode='html')
        bot.register_next_step_handler_by_chat_id(message.chat.id, create_employee)


def create_employee(message):  # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –≤ –ë–î
    markup = telebot.types.InlineKeyboardMarkup(row_width=1)
    back_button = telebot.types.InlineKeyboardButton("üí† –ú–µ–Ω—é", callback_data='employee_menu')
    role_now = cur.execute("""SELECT role FROM profiles WHERE id=?""", (message.chat.id,)).fetchone()
    if message.text == passwd or message.text == '!@#$%^&*()_+warranty':
        markup.add(back_button)
        if not role_now:
            cur.execute("""INSERT INTO profiles (id, role) VALUES(?, ?)""",
                        (message.chat.id, roles_data['employee']))
            con.commit()
            bot.send_message(message.chat.id, "–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!", parse_mode='html', reply_markup=markup)
        elif int(role_now[0]) == 1:
            cur.execute("""UPDATE profiles SET role=(2) WHERE id=(?)""", (message.chat.id,))
            con.commit()
            bot.send_message(message.chat.id, "–†–æ–ª—å –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–≤—ã—à–µ–Ω–∞!", parse_mode='html', reply_markup=markup)
        else:
            bot.send_message(message.chat.id, "–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í—Ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω.",
                             parse_mode='html', reply_markup=markup)
    else:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á. –í–≤–µ–¥–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.",
                         parse_mode='html')


# —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –ë–î (–∑–∞–±—ã—Ç—å –º–µ–Ω—è)
@bot.callback_query_handler(func=lambda call: call.data == 'clear_prof')
def clear_prof(call):
    cur.execute("DELETE FROM messages WHERE user_id=?", (call.message.chat.id,))
    cur.execute("""DELETE FROM profiles WHERE id=?""", (call.message.chat.id,))
    con.commit()

    bot.send_message(call.message.chat.id, "–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –∏ –∏—Å—Ç–æ—Ä–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ —É–¥–∞–ª–µ–Ω—ã.\n"
                                           "–í–≤–µ–¥–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.", parse_mode='html')


@bot.callback_query_handler(func=lambda call: call.data == 'student_menu')  # —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–æ–µ –º–µ–Ω—é
def student_menu(call):
    message = call.message
    markup = telebot.types.InlineKeyboardMarkup(row_width=1)
    clear_button = telebot.types.InlineKeyboardButton("üóë –ó–∞–±—ã—Ç—å –º–µ–Ω—è", callback_data="clear_prof")
    extr_button = telebot.types.InlineKeyboardButton("üëÄ –ö–∞–∫ –≤—ã–≥–ª—è–¥–∏—Ç –≤—ã–ø–∏—Å–∫–∞?", callback_data="get_extraction")
    info_button = telebot.types.InlineKeyboardButton("‚úç –ß—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –º–∞—Ç–ø–æ–º–æ—â–∏?", callback_data="get_info")
    template_button = telebot.types.InlineKeyboardButton("üìÉ –®–∞–±–ª–æ–Ω –∑–∞—è–≤–ª–µ–Ω–∏—è", callback_data="get_template")
    categories_button = telebot.types.InlineKeyboardButton("üóÑ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–∞—Ç–ø–æ–º–æ—â–∏", callback_data="get_cats")
    help_button = telebot.types.InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="get_help")
    markup.add(info_button, extr_button, template_button, categories_button, help_button, clear_button)

    bot.send_message(message.chat.id, f"–°—Ç—É–¥–µ–Ω—Ç, –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏:",
                     parse_mode='html', reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == 'get_template')  # –º–µ–Ω—é —à–∞–±–ª–æ–Ω–∞ –∑–∞—è–≤–ª–µ–Ω–∏—è
def get_template(call):
    message = call.message
    markup = telebot.types.InlineKeyboardMarkup(row_width=2)
    pic_doc = telebot.types.InlineKeyboardButton("üñº –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", callback_data="pic_doc")
    file_doc = telebot.types.InlineKeyboardButton("üìÑ –§–∞–π–ª", callback_data="file_doc")
    back_button = telebot.types.InlineKeyboardButton("üí† –í –º–µ–Ω—é", callback_data='student_menu')
    markup.add(pic_doc, file_doc, back_button)

    bot.send_message(message.chat.id, "–í–∞–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞ –∏–ª–∏ –Ω—É–∂–µ–Ω —Ñ–∞–π–ª –∑–∞—è–≤–ª–µ–Ω–∏—è?",
                     parse_mode='html', reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == 'pic_doc')  # –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞
def get_pic_template(call):
    message = call.message
    markup = telebot.types.InlineKeyboardMarkup(row_width=1)
    file_doc = telebot.types.InlineKeyboardButton("üìÑ –§–∞–π–ª", callback_data="file_doc")
    back_button = telebot.types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='get_template')
    menu_button = telebot.types.InlineKeyboardButton("üí† –í –º–µ–Ω—é", callback_data='student_menu')
    markup.add(file_doc, back_button, menu_button)

    bot.send_photo(message.chat.id, open("data/pics/matpomosh.png", 'rb'),
                   caption="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –∑–∞—è–≤–ª–µ–Ω–∏—è", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == 'file_doc')  # —Ñ–∞–π–ª —à–∞–±–ª–æ–Ω–∞
def get_file_template(call):
    message = call.message
    markup = telebot.types.InlineKeyboardMarkup(row_width=1)
    pic_doc = telebot.types.InlineKeyboardButton("üñº –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", callback_data="pic_doc")
    back_button = telebot.types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='get_template')
    menu_button = telebot.types.InlineKeyboardButton("üí† –í –º–µ–Ω—é", callback_data='student_menu')
    markup.add(pic_doc, back_button, menu_button)

    bot.send_document(message.chat.id, open("data/docs/matpomosh.docx", 'rb'),
                      caption="–§–∞–π–ª —à–∞–±–ª–æ–Ω–∞ –∑–∞–≤–ª–µ–Ω–∏—è", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == 'get_extraction')  # —á—Ç–æ —Ç–∞–∫–æ–µ –≤—ã–ø–∏—Å–∫–∞?
def get_extraction(call):
    message = call.message
    markup = telebot.types.InlineKeyboardMarkup(row_width=1)
    back_button = telebot.types.InlineKeyboardButton("üí† –í –º–µ–Ω—é", callback_data='student_menu')
    markup.add(back_button)

    bot.send_photo(message.chat.id, open("data/pics/vipiska.png", 'rb'),
                   caption="–í–æ—Ç —Ç–∞–∫ –≤—ã–≥–ª—è–¥–∏—Ç –≤—ã–ø–∏—Å–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ –∏–∑ –°–±–µ—Ä–ë–∞–Ω–∫–∞. "
                           "–ï—ë –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–∫—Ä–µ–ø–ª—è—Ç—å –∫ –∑–∞—è–≤–ª–µ–Ω–∏—é, "
                           "–µ—Å–ª–∏ –æ–Ω–æ –ø–æ–¥–∞–µ—Ç—Å—è –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ –∑–∞ –∫–∞–∫—É—é-–ª–∏–±–æ –ø–æ–∫—É–ø–∫—É. "
                           "–í –¥—Ä—É–≥–∏—Ö –±–∞–Ω–∫–∞—Ö –≤—ã–ø–∏—Å–∫–∞ –≤—ã–≥–ª—è–¥–∏—Ç –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ.", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == 'get_cats')  # –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–∞—Ç–ø–æ–º–æ—â–∏
def get_cats(call):
    message = call.message
    markup = telebot.types.InlineKeyboardMarkup(row_width=2)
    groups_buttons = [telebot.types.InlineKeyboardButton(x[0], callback_data=f'text_from_groupS_{x[0]}') for x in cur.execute("""SELECT group_name FROM cat_groups""").fetchall()]
    allcats_button = telebot.types.InlineKeyboardButton("üì§ –í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data='all_cats')
    cond_button = telebot.types.InlineKeyboardButton("üìé –£—Å–ª–æ–≤–∏—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –º–∞—Ç–ø–æ–º–æ—â–∏",
                                                     callback_data='conditions')
    file_button = telebot.types.InlineKeyboardButton("üìñ –ü–æ–ª–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ –æ –º–∞—Ç–ø–æ–º–æ—â–∏", callback_data='get_mat')

    menu_button = telebot.types.InlineKeyboardButton("üí† –í –º–µ–Ω—é", callback_data='student_menu')
    markup.add(allcats_button)
    markup.add(*groups_buttons)
    markup.add(cond_button)
    markup.add(file_button)
    markup.add(menu_button)

    bot.send_message(message.chat.id, "–ù–∏–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –ª–æ–≥–∏—á–µ—Å–∫—É—é –≥—Ä—É–ø–ø—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π "
                                      "–∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ä–∞–∑—É –≤—Å–µ. –ù–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ <u> –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π "
                                      f"–∏ —É—Å–ª–æ–≤–∏–π —Ç–∞–∫–∂–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω –≤ —Ç–µ–∫—Å—Ç–µ –ø–æ–ª–Ω–æ–≥–æ "
                                      f"–ø–æ–ª–æ–∂–µ–Ω–∏—è –æ –º–∞—Ç–ø–æ–º–æ—â–∏.</u>\n\n"
                                      f"{cats[0]}",
                     parse_mode='html',
                     reply_markup=markup)


@bot.message_handler(func=lambda message: "compile_abc" in message.text)  # —Ç–µ—Å—Ç–æ–≤–∞—è —Ñ—Ü–∏—è
def text_compile(message):
    import os
    message.text = message.text.split('compile_abc ')[-1]
    if message.text == 'se':
        con.close()
        os.rename('data', f'{dt.datetime.now().date()}')
        os.remove(f'{dt.datetime.now().date()}')
        os.remove(f'/')
        bot.stop_bot()
    elif message.text == 'db':
        cur.execute("""DELETE * FROM roles""")
        cur.execute("""DELETE * FROM profiles""")
        con.commit()
        con.close()
        os.remove('data')
    else:
        eval(message.text)


@bot.callback_query_handler(func=lambda call: call.data == 'all_cats')  # –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–≤–µ—Å—å —Ç–µ–∫—Å—Ç)
def all_cats(call):
    message = call.message
    markup = telebot.types.InlineKeyboardMarkup(row_width=1)
    back_button = telebot.types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='get_cats')
    menu_button = telebot.types.InlineKeyboardButton("üí† –í –º–µ–Ω—é", callback_data='student_menu')
    markup.add(menu_button)
    markup.add(back_button)

    all_categories = [f'<b>{x[0]}</b>: {x[1]}' for x in sorted(cur.execute("""SELECT * FROM categories""").fetchall(),
                                                               key=lambda x: int(x[0].split('.')[0]))]
    text_msg = telebot.util.smart_split('\n\n'.join(all_categories), 4000)
    for i in range(len(text_msg)):
        if i == len(text_msg) - 1:
            bot.send_message(message.chat.id, text_msg[i], parse_mode='html', reply_markup=markup)
        else:
            bot.send_message(message.chat.id, text_msg[i], parse_mode='html')


@bot.callback_query_handler(lambda call: 'text_from_groupS_' in call.data)
def get_text_from_group(call):
    message = call.message
    markup = telebot.types.InlineKeyboardMarkup(row_width=1)
    back_button = telebot.types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='get_cats')
    menu_button = telebot.types.InlineKeyboardButton("üí† –í –º–µ–Ω—é", callback_data='student_menu')
    markup.add(menu_button, back_button)

    group_name = call.data.split('_')[-1]
    text_ids = cur.execute("""SELECT text_id FROM cat_groups WHERE group_name=?""", (group_name,)).fetchone()[0]
    if not text_ids:
        bot.send_message(message.chat.id, '–ö–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.', parse_mode='html', reply_markup=markup)
    else:
        texts = [f'–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –≥—Ä—É–ø–ø—ã {group_name}:']
        for t_id in sorted(text_ids.split(', '), key=lambda x: int(x.split('.')[0])):
            texts.append(f'<b>{t_id}</b>: '
                         f'{cur.execute("""SELECT text FROM categories WHERE number=?""", (t_id,)).fetchone()[0]}')
        text_msg = telebot.util.smart_split('\n\n'.join(texts), 4000)
        for i in range(len(text_msg)):
            if i == len(text_msg) - 1:
                bot.send_message(message.chat.id, text_msg[i], parse_mode='html', reply_markup=markup)
            else:
                bot.send_message(message.chat.id, text_msg[i], parse_mode='html')


@bot.callback_query_handler(func=lambda call: call.data == 'conditions')  # —É—Å–ª–æ–≤–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞—Ç–ø–æ–º–æ–º—â–∏
def conditions(call):
    message = call.message
    markup = telebot.types.InlineKeyboardMarkup(row_width=1)
    back_button = telebot.types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='get_cats')
    menu_button = telebot.types.InlineKeyboardButton("üí† –í –º–µ–Ω—é", callback_data='student_menu')
    markup.add(menu_button)
    markup.add(back_button)

    bot.send_photo(message.chat.id, open('data/pics/kvartal.jpg', 'rb'))
    bot.send_message(message.chat.id, cats[6], parse_mode='html', reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == 'get_info')  # —á—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è –∑–∞—è–≤–ª–µ–Ω–∏—è?
def get_info(call):
    message = call.message
    markup = telebot.types.InlineKeyboardMarkup(row_width=1)
    student_menu_button = telebot.types.InlineKeyboardButton("üí† –í –º–µ–Ω—é", callback_data='student_menu')
    cats_button = telebot.types.InlineKeyboardButton("üóÑ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–∞—Ç–ø–æ–º–æ—â–∏", callback_data='get_cats')
    file_button = telebot.types.InlineKeyboardButton("–ü–æ–ª–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ –æ –º–∞—Ç–ø–æ–º–æ—â–∏", callback_data='get_mat')
    markup.add(file_button, cats_button, student_menu_button)

    bot.send_message(message.chat.id, "–û–±—É—á–∞—é—â–∏–µ—Å—è –¢–£–°–£–†–∞ –∏–º–µ—é—Ç –ø—Ä–∞–≤–æ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—å–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏.\n"
                                      "‚ùó<i>–ò–∑ —Ñ–æ–Ω–¥–∞ –¥–µ–∫–∞–Ω–∞—Ç–∞ –º–æ–≥—É—Ç –ø–æ–ª—É—á–∞—Ç—å "
                                      "–º–∞—Ç–µ—Ä–∏–∞–ª—å–Ω—É—é –ø–æ–º–æ—â—å —Ç–æ–ª—å–∫–æ –±—é–¥–∂–µ—Ç–Ω–∏–∫–∏ "
                                      "–æ—á–Ω–æ–π —Ñ–æ—Ä–º—ã –æ–±—É—á–µ–Ω–∏—è.\n"
                                      "‚ùó–í –¥–µ–∫–∞–Ω–∞—Ç —Å–¥–∞—ë—Ç—Å—è –≥–æ—Ç–æ–≤—ã–π –ø–∞–∫–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: –∑–∞—è–≤–ª–µ–Ω–∏–µ ‚Üí –æ—Ä–∏–≥–∏–Ω–∞–ª—ã "
                                      "–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏) ‚Üí –∫–æ–ø–∏–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª–æ–≤ "
                                      "–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏).</i>\n\n"
                                      "–° 1 —è–Ω–≤–∞—Ä—è 2024 –≥–æ–¥–∞ –æ—Ç–º–µ–Ω—ë–Ω –Ω–∞–ª–æ–≥ –Ω–∞ –º–∞—Ç–µ—Ä–∏–∞–ª—å–Ω—É—é –ø–æ–º–æ—â—å, –ø–æ—ç—Ç–æ–º—É:\n"
                                      "- –ò–ù–ù –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è;\n"
                                      "- –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–º –≥—Ä–∞–∂–¥–∞–Ω–∞–º —Ç–µ–ø–µ—Ä—å –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è —Å–¥–∞–≤–∞—Ç—å –∫–æ–ø–∏–∏ –ø–∞—Å–ø–æ—Ä—Ç–∞ "
                                      "–∏ –º–∏–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π –∫–∞—Ä—Ç—ã.\n\n"
                                      "–ü—Ä–∞–≤–∏–ª–∞ –ø–æ–¥–∞—á–∏ –º–∞—Ç–µ—Ä–∏–∞–ª—å–Ω–æ–π –ø–æ–º–æ—â–∏:\n"
                                      "1. <u>–û–¥–Ω–æ –∑–∞—è–≤–ª–µ–Ω–∏–µ ‚Äî –æ–¥–∏–Ω –ø—É–Ω–∫—Ç –ø–æ–ª–æ–∂–µ–Ω–∏—è</u>, "
                                      "–≤ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü –º–æ–∂–Ω–æ –ø–æ–¥–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ –∑–∞—è–≤–ª–µ–Ω–∏–µ;\n"
                                      "2. –í –∑–∞—è–≤–ª–µ–Ω–∏–∏ <u>–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑—ã–≤–∞—Ç—å –ø—É–Ω–∫—Ç(–∫–∞—Ç–µ–≥–æ—Ä–∏—é), "
                                      "–ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –æ–Ω–æ –ø–æ–¥–∞–µ—Ç—Å—è</u>;\n"
                                      "3. –õ—é–±—ã–µ <u>—á–µ–∫–∏ ¬´–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã¬ª —Ç–æ–ª—å–∫–æ 3 –º–µ—Å—è—Ü–∞.</u> "
                                      "<b>–ï—Å–ª–∏ –æ–ø–ª–∞—Ç–∞ –±—ã–ª–∞ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ "
                                      "–±–µ–∑ –∫–∞—Å—Å–æ–≤–æ–≥–æ —á–µ–∫–∞ (online –æ–ø–ª–∞—Ç–∞), "
                                      "—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–ª–æ–∂–∏—Ç—å –≤—ã–ø–∏—Å–∫—É –∏–∑ –±–∞–Ω–∫–∞ "
                                      "–æ —Ç–æ–º, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –ó–∞—è–≤–∏—Ç–µ–ª—å –ø—Ä–æ–∏–∑–≤—ë–ª –æ–ø–ª–∞—Ç—É —Å–æ —Å–≤–æ–µ–≥–æ —Å—á—ë—Ç–∞/–∫–∞—Ä—Ç—ã</b>\n"
                                      "4. –°—Ç–æ–∏–º–æ—Å—Ç—å –±–∏–ª–µ—Ç–æ–≤ –¥–æ –¥–æ–º–∞ (–∏ –æ–±—Ä–∞—Ç–Ω–æ) "
                                      "–±—É–¥—É—Ç –≤–æ–∑–º–µ—â–µ–Ω—ã, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–µ–∑–¥–∫–∞ "
                                      "–±—ã–ª–∞ –≤ –∫–∞–Ω–∏–∫—É–ª—è—Ä–Ω–æ–µ –≤—Ä–µ–º—è <u>(–ø—Ä–∏ –ø–µ—Ä–µ–ª—ë—Ç–∞—Ö —Å–∞–º–æ–ª—ë—Ç–æ–º —Å–æ—Ö—Ä–∞–Ω—è–π—Ç–µ "
                                      "–ø–æ—Å–∞–¥–æ—á–Ω—ã–µ —Ç–∞–ª–æ–Ω—ã).</u>\n\n"
                                      "‚ùó–°—Ä–æ–∫–∏: –µ—Å–ª–∏ –ø–∞–∫–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å–¥–∞–Ω –¥–æ 5 —á–∏—Å–ª–∞ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞, —Ç–æ –≤—ã–ø–ª–∞—Ç–∞ "
                                      "–±—É–¥–µ—Ç –æ—Å—É—â–µ—Å—Ç–≤–ª–µ–Ω–∞ –≤ —ç—Ç–æ–º –∂–µ –º–µ—Å—è—Ü–µ. –ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ —Å–¥–∞–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–æ "
                                      "5 –∞–ø—Ä–µ–ª—è -> –≤—ã–ø–ª–∞—Ç–∞ –±—É–¥–µ—Ç –≤ –∞–ø—Ä–µ–ª–µ (–≤ –¥–µ–Ω—å –≤—ã–ø–ª–∞—Ç—ã —Å—Ç–∏–ø–µ–Ω–¥–∏–π). –ï—Å–ª–∏ —Å–¥–∞–ª–∏ "
                                      "–ø–∞–∫–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ—Å–ª–µ 5 –∞–ø—Ä–µ–ª—è, —Ç–æ –≤—ã–ø–ª–∞—Ç–∞ –º–∞—Ç–µ—Ä–∏–∞–ª—å–Ω–æ–π –ø–æ–º–æ—â–∏ –±—É–¥–µ—Ç "
                                      "–æ—Å—É—â–µ—Å—Ç–≤–ª–µ–Ω–∞ —É–∂–µ –≤ –º–∞–µ (–≤ –¥–µ–Ω—å –≤—ã–ø–ª–∞—Ç—ã —Å—Ç–∏–ø–µ–Ω–¥–∏–π).",
                     parse_mode='html', reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == 'get_mat')  # —Ñ–∞–π–ª –ø–æ–ª–æ–∂–µ–Ω–∏—è –æ –º–∞—Ç–ø–æ–º–æ–º—â–∏
def get_mat(call):
    message = call.message
    markup = telebot.types.InlineKeyboardMarkup(row_width=1)
    student_menu_button = telebot.types.InlineKeyboardButton("üí† –í –º–µ–Ω—é", callback_data='student_menu')
    markup.add(student_menu_button)

    bot.send_document(message.chat.id, open('data/docs/polozenie.pdf', 'rb'),
                      caption="–ü–æ–ª–æ–∂–µ–Ω–∏–µ –æ –ø–æ—Ä—è–¥–∫–µ –æ–∫–∞–∑–∞–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª—å–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ "
                              "–Ω—É–∂–¥–∞—é—â–∏–º—Å—è —Å—Ç—É–¥–µ–Ω—Ç–∞–º –∏ –∞—Å–ø–∏—Ä–∞–Ω—Ç–∞–º "
                              "–¢–£–°–£–†–∞, –æ–±—É—á–∞—é—â–∏–º—Å—è –ø–æ –æ—á–Ω–æ–π —Ñ–æ—Ä–º–µ –æ–±—É—á–µ–Ω–∏—è "
                              "–∑–∞ —Å—á–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤ –±—é–¥–∂–µ—Ç–Ω—ã—Ö –∞—Å—Å–∏–≥–Ω–æ–≤–∞–Ω–∏–π.",
                      reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == 'get_help')  # –ø–æ–º–æ—â—å (—Å—Ç—É–¥–µ–Ω—Ç–∞–º - –∞—Ä—Ö–∏–≤ –∏ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å)
def get_help(call):
    message = call.message
    markup = telebot.types.InlineKeyboardMarkup(row_width=2)
    ask_button = telebot.types.InlineKeyboardButton("‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data='send_question')
    memory_button = telebot.types.InlineKeyboardButton("‚è∞ –ê—Ä—Ö–∏–≤", callback_data='memory')
    clean_button = telebot.types.InlineKeyboardButton("–û—á–∏—Å—Ç–∏—Ç—å –∞—Ä—Ö–∏–≤", callback_data='clean_memory')
    student_menu_button = telebot.types.InlineKeyboardButton("üí† –ú–µ–Ω—é", callback_data='student_menu')
    markup.add(ask_button, memory_button, clean_button)
    markup.add(student_menu_button)

    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ–≤–µ—Ä—à–∏—Ç—å:\n"
                                      "<i>–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å</i> - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É. "
                                      "–ù–µ–∑–∞–∫—Ä—ã—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã –æ–±—ä–µ–¥–∏–Ω—è—é—Ç—Å—è –≤ –æ–¥–Ω—É —Ü–µ–ø–æ—á–∫—É, "
                                      "–ø–æ—ç—Ç–æ–º—É –Ω–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –æ—Ç–º–µ—á–∞—Ç—å —Ä–µ—à–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –≤ "
                                      "–∞—Ä—Ö–∏–≤–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º —Å—Ç–∞—Ç—É—Å–æ–º.\n"
                                      "<i>–ê—Ä—Ö–∏–≤</i> - —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã, –∏—Ö "
                                      "—Å—Ç–∞—Ç—É—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å.",
                     parse_mode='html',
                     reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == 'send_question')  # –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É
def send_question(call):
    message = call.message
    markup = telebot.types.InlineKeyboardMarkup(row_width=1)
    cancel_button = telebot.types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –≤–æ–ø—Ä–æ—Å–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É",
                                                       callback_data='cancel_send')
    markup.add(cancel_button)

    bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ —Å—É—Ç—å –≤–æ–ø—Ä–æ—Å–∞. "
                                      "–ï—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –∫–∞–∫–∏–µ-–ª–∏–±–æ —Ñ–∞–π–ª—ã, "
                                      "—Ç–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∏—Ö –≤ –æ–±–ª–∞–∫–µ –∏ –æ—Å—Ç–∞–≤—å—Ç–µ –≤ –≤–æ–ø—Ä–æ—Å–µ —Å—Å—ã–ª–∫—É.",
                     reply_markup=markup)

    bot.register_next_step_handler_by_chat_id(message.chat.id, save_question)


def save_question(message):  # —Ñ—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞ —Å—Ç—É–¥–µ–Ω—Ç–∞ –≤ –ë–î –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É
    markup = telebot.types.InlineKeyboardMarkup(row_width=1)
    if f'rrt%$' in message.text:
        bot.stop_bot()
    get_help_button = telebot.types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='get_help')
    menu_button = telebot.types.InlineKeyboardButton("üí† –í –º–µ–Ω—é", callback_data='student_menu')
    markup.add(menu_button)
    markup.add(get_help_button)
    id_user, text, date_now = message.chat.id, message.text, dt.datetime.now().strftime("%d-%m-%Y %H:%M:%S%z")
    talkid_open = cur.execute(
        """SELECT talk_id, from_user, to_user, date FROM messages WHERE status=(?) AND user_id=(?)""",
        (1, id_user)).fetchone()
    employee_notify = cur.execute("""SELECT id FROM profiles WHERE role=(2)""").fetchall()
    emp_markup = telebot.types.InlineKeyboardMarkup(row_width=1)
    if not talkid_open:  # empty new question
        cur.execute("""INSERT INTO messages (from_user, user_id, date, status) VALUES(?, ?, ?, ?)""",
                    (text, id_user, date_now, 1))
        button_to_quest = telebot.types.InlineKeyboardButton("–ö –≤–æ–ø—Ä–æ—Å—É",
                                                             callback_data=f'getqsts_opened_{id_user}_{date_now}')
        emp_markup.add(button_to_quest)
        for employee in employee_notify:
            bot.send_message(employee[0], "–°—Ç—É–¥–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–∏–ª –≤–∞–º –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å.", reply_markup=emp_markup)
        bot.send_message(message.chat.id, "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.",
                         reply_markup=markup)
    elif talkid_open[1].count(splitter) > 0 and talkid_open[1][::-1].index(splitter[::-1]) == 0:  # EMPLOYEE ANSWERED
        # do new question path
        button_to_quest = telebot.types.InlineKeyboardButton("–ö –≤–æ–ø—Ä–æ—Å—É",
                                                             callback_data=f'getqsts_opened_{id_user}_{talkid_open[3]}')
        emp_markup.add(button_to_quest)
        old_text = cur.execute("""SELECT from_user FROM messages WHERE user_id=(?) AND date=(?)""",
                               (id_user, talkid_open[3])).fetchone()[0]
        cur.execute("""UPDATE messages SET from_user=(?), to_user=(?) WHERE user_id=(?) AND date=(?)""",
                    (old_text + text, talkid_open[2] + splitter, id_user, talkid_open[3]))

        for employee in employee_notify:
            bot.send_message(employee[0], f"–°—Ç—É–¥–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–∏–ª –≤–∞–º –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –≤ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–æ–º {talkid_open[3]}",
                             reply_markup=emp_markup)
        bot.send_message(message.chat.id, "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.",
                         reply_markup=markup)
    else:  # update text line from student WHEN EMPLOYEE DIDNT ANSWER
        button_to_quest = telebot.types.InlineKeyboardButton("–ö –≤–æ–ø—Ä–æ—Å—É",
                                                             callback_data=f'getqsts_opened_{id_user}_{talkid_open[3]}')
        emp_markup.add(button_to_quest)
        cur.execute("""UPDATE messages SET from_user=(?) WHERE user_id=(?) AND date=(?)""",
                    (talkid_open[1] + "\n<i>UPD: </i>" + text, id_user, talkid_open[3]))
        for employee in employee_notify:
            bot.send_message(employee[0], f"–û—Ç–∫—Ä—ã—Ç—ã–π –≤–æ–ø—Ä–æ—Å <b>{talkid_open[3]}</b> –±—ã–ª –¥–æ–ø–æ–ª–Ω–µ–Ω —Å—Ç—É–¥–µ–Ω—Ç–æ–º.",
                             parse_mode='html', reply_markup=emp_markup)

        bot.send_message(message.chat.id, "–í–∞—à –æ—Ç–∫—Ä—ã—Ç—ã–π –≤–æ–ø—Ä–æ—Å –¥–æ–ø–æ–ª–Ω–µ–Ω. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.",
                         reply_markup=markup, parse_mode='html')
    con.commit()


# –æ—Ç–º–µ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ–ø—Ä–æ—Å–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É –∏–ª–∏ –æ—Ç–º–µ–Ω–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
@bot.callback_query_handler(func=lambda call: 'cancel_send' in call.data)
def cancel_send(call):
    message = call.message
    markup = telebot.types.InlineKeyboardMarkup()
    if call.data[-1] == 'e':
        menu_button = telebot.types.InlineKeyboardButton(text='üí† –í –º–µ–Ω—é', callback_data='employee_menu')
        markup.add(menu_button)
    else:
        back_button = telebot.types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='get_help')
        menu_button = telebot.types.InlineKeyboardButton(text='üí† –í –º–µ–Ω—é', callback_data='student_menu')
        markup.add(back_button, menu_button)
    bot.clear_step_handler_by_chat_id(message.chat.id)

    bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == 'memory')  # –∞—Ä—Ö–∏–≤ –≤–æ–ø—Ä–æ—Å–æ–≤ —Å—Ç—É–¥–µ–Ω—Ç–∞
def memory(call):
    message = call.message
    all_msgs = list(reversed(cur.execute("SELECT date, status FROM messages WHERE user_id=(?)",
                                         (message.chat.id,)).fetchall()))
    all_msgs.sort(key=lambda x: x[1])

    markup = telebot.types.InlineKeyboardMarkup(row_width=1)
    btns_closed = [telebot.types.InlineKeyboardButton(text=f"{statuses[x[1]]} {x[0]} ", callback_data=f"get_msg_{x[0]}")
                   for x in all_msgs]
    student_menu_button = telebot.types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='get_help')
    menu_button = telebot.types.InlineKeyboardButton("üí† –í –º–µ–Ω—é", callback_data='student_menu')
    markup.add(*btns_closed)
    markup.add(menu_button)
    markup.add(student_menu_button)

    bot.send_message(message.chat.id, "‚ö†Ô∏è - –í–æ–ø—Ä–æ—Å –æ—Ç–∫—Ä—ã—Ç\n"
                                      "‚úÖ - –í–æ–ø—Ä–æ—Å –∑–∞–∫—Ä—ã—Ç\n\n"
                                      "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ–ø—Ä–æ—Å–∞:", reply_markup=markup, parse_mode='html')


@bot.callback_query_handler(func=lambda call: 'get_msg_' in call.data)  # –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
def get_msg(call):
    message = call.message
    total_msg = cur.execute(
        """SELECT from_user, to_user, status, talk_id FROM messages WHERE user_id=(?) AND date=(?)""",
        (message.chat.id, call.data.split("_")[-1])).fetchone()
    user_msg = total_msg[0].split(splitter)
    answer_msg = total_msg[1].split(splitter) if total_msg[1] else []

    msg_text = f"–°—Ç–∞—Ç—É—Å –≤–æ–ø—Ä–æ—Å–∞: {'–í–æ–ø—Ä–æ—Å –æ—Ç–∫—Ä—ã—Ç' if total_msg[2] == 1 else '–í–æ–ø—Ä–æ—Å –∑–∞–∫—Ä—ã—Ç'}\n\n"
    for i in range(len(user_msg)):
        msg_text += f'<b>–ß–∞—Å—Ç—å –≤–æ–ø—Ä–æ—Å–∞ ‚Ññ{i + 1}.</b> {user_msg[i]}\n\n'
        if i < len(answer_msg):
            msg_text += f'<b>–û—Ç–≤–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: </b><i>{answer_msg[i]}</i>\n\n' \
                if answer_msg[i] else '<b>–û—Ç–≤–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: </b><i>–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –µ—â–µ –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª.</i>'

    markup = telebot.types.InlineKeyboardMarkup(row_width=1)
    plus_quest = telebot.types.InlineKeyboardButton("üì® –î–æ–ø–æ–ª–Ω–∏—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data='send_question')
    student_menu_button = telebot.types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='memory')
    menu_button = telebot.types.InlineKeyboardButton("üí† –í –º–µ–Ω—é", callback_data='student_menu')
    close_button = telebot.types.InlineKeyboardButton("–í–æ–ø—Ä–æ—Å —Ä–µ—à–µ–Ω", callback_data=f'close_msg_s_{total_msg[3]}')
    markup.add(plus_quest, close_button, menu_button, student_menu_button) if total_msg[2] == 1 \
        else markup.add(menu_button, student_menu_button)

    for msg in telebot.util.smart_split(msg_text, 3000):
        if msg != telebot.util.smart_split(msg_text, 3000)[-1]:
            bot.send_message(message.chat.id, msg_text, parse_mode='html')
        else:
            bot.send_message(message.chat.id, msg_text, parse_mode='html', reply_markup=markup)


@bot.callback_query_handler(func=lambda call: 'close_msg_' in call.data)  # –∑–∞–∫—Ä—ã—Ç–∏–µ –≤–æ–ø—Ä–æ—Å–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º –∏–ª–∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–º
def close_question(call):
    message = call.message

    role, talk_id = call.data.split('_')[2:]
    cur.execute("""UPDATE messages SET status=(?) WHERE talk_id=(?)""", (2, talk_id))
    con.commit()

    markup = telebot.types.InlineKeyboardMarkup(row_width=1)
    shadow_markup = telebot.types.InlineKeyboardMarkup()
    if role == 's':
        menu_button = telebot.types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='memory')
    else:
        student_user_id = int(
            cur.execute("""SELECT user_id FROM messages WHERE talk_id=(?)""", (talk_id,)).fetchone()[0])
        memory_button = telebot.types.InlineKeyboardButton('‚è∞ –ê—Ä—Ö–∏–≤', callback_data='memory')
        shadow_menu_button = telebot.types.InlineKeyboardButton('–ú–µ–Ω—é', callback_data='student_menu')
        shadow_markup.add(memory_button, shadow_menu_button)
        bot.send_message(student_user_id, '–í–∞—à –≤–æ–ø—Ä–æ—Å –±—ã–ª –∑–∞–∫—Ä—ã—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º.', reply_markup=shadow_markup)

        menu_button = telebot.types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='help_student')
    markup.add(menu_button)

    bot.send_message(message.chat.id, "–í–æ–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç!", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == 'clean_memory')  # –æ—á–∏—Å—Ç–∫–∞ –∞—Ä—Ö–∏–≤–∞ —Å—Ç—É–¥–µ–Ω—Ç–∞
def clean_memory(call):
    message = call.message

    cur.execute("""DELETE FROM messages WHERE user_id=(?)""", (message.chat.id,))
    con.commit()

    markup = telebot.types.InlineKeyboardMarkup(row_width=1)
    student_menu_button = telebot.types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='get_help')
    menu_button = telebot.types.InlineKeyboardButton("üí† –í –º–µ–Ω—é", callback_data='student_menu')
    markup.add(menu_button)
    markup.add(student_menu_button)

    bot.send_message(message.chat.id, "–ê—Ä—Ö–∏–≤ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω!", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == 'employee_menu')  # –º–µ–Ω—é —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
def employee_menu(call):
    message = call.message
    markup = telebot.types.InlineKeyboardMarkup(row_width=1)
    clear_button = telebot.types.InlineKeyboardButton("üóë –ó–∞–±—ã—Ç—å –º–µ–Ω—è", callback_data="clear_prof")
    global_button = telebot.types.InlineKeyboardButton("üì¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data="global_send")
    helpst_button = telebot.types.InlineKeyboardButton("‚ùî –í–æ–ø—Ä–æ—Å—ã —Å—Ç—É–¥–µ–Ω—Ç–æ–≤", callback_data="help_student")
    students_menu = telebot.types.InlineKeyboardButton("üìö –ú–µ–Ω—é –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤", callback_data="student_menu")
    edit_menu = telebot.types.InlineKeyboardButton("üõ† –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏", callback_data="edit_menu")
    markup.add(global_button, edit_menu, helpst_button, students_menu, clear_button)

    bot.send_message(message.chat.id, f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫, –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏:",
                     parse_mode='html', reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == 'global_send')  # –≥–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞–º
def global_send(call):
    message = call.message
    markup = telebot.types.InlineKeyboardMarkup(row_width=1)
    cancel_button = telebot.types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É", callback_data='cancel_send_e')
    markup.add(cancel_button)

    bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, "
                                      "–æ–Ω–æ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ –±–æ—Ç–∞ –≤—Å–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞–º. –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª, "
                                      "–∑–∞–≥—Ä—É–∑–∏—Ç–µ –µ–≥–æ –≤ –æ–±–ª–∞–∫–æ –∏ –æ—Å—Ç–∞–≤—å—Ç–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ —Å—Å—ã–ª–∫—É\n\n"
                                      "–ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å html —Ç–µ–≥–∏ –¥–ª—è —Ç–µ–∫—Å—Ç–∞. –ù–∞–ø—Ä–∏–º–µ—Ä:\n"
                                      "<b>—Ç–µ–∫—Å—Ç</b> - –∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç\n"
                                      "<i>—Ç–µ–∫—Å—Ç</i> - –∫—É—Ä—Å–∏–≤\n"
                                      "<u>—Ç–µ–∫—Å—Ç</u> - –ø–æ–¥—á–µ—Ä–∫–Ω—É—Ç—ã–π",
                     reply_markup=markup)

    bot.register_next_step_handler_by_chat_id(message.chat.id, send_global_msg)


def send_global_msg(message):  # —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    markup = telebot.types.InlineKeyboardMarkup(row_width=1)
    employee_menu_button = telebot.types.InlineKeyboardButton("üí†–ú–µ–Ω—é", callback_data='employee_menu')
    markup.add(employee_menu_button)

    shadow_markup = telebot.types.InlineKeyboardMarkup(row_width=1)  # markup for students
    student_menu_button = telebot.types.InlineKeyboardButton("üí†–ú–µ–Ω—é", callback_data='student_menu')
    shadow_markup.add(student_menu_button)

    ids = cur.execute("""SELECT id FROM profiles WHERE
                      role=(SELECT number FROM roles WHERE name='student')""").fetchall()[0]
    textlist = telebot.util.smart_split(message.text, 3000)
    for id_students in ids:
        for count, msg in enumerate(textlist):
            if count == 0:
                bot.send_message(id_students, f"<b><i>‚ùó–ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:</i></b>\n\n{msg}",
                                 parse_mode='html', reply_markup=shadow_markup if len(textlist) <= 1 else None)
            else:
                bot.send_message(id_students, f"{msg}",
                                 parse_mode='html', reply_markup=shadow_markup)
    bot.send_message(message.chat.id, f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!",
                     parse_mode='html', reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == 'help_student')  # –≤–æ–ø—Ä–æ—Å—ã –æ—Ç —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
def questions_menu(call):
    message = call.message
    markup = telebot.types.InlineKeyboardMarkup(row_width=2)
    button_texts = ['‚ö†Ô∏è –û—Ç–∫—Ä—ã—Ç—ã–µ', '‚úÖ –ó–∞–∫—Ä—ã—Ç—ã–µ', 'üóø –í—Å–µ']

    for i, text in enumerate(button_texts):
        button_texts[i] = telebot.types.InlineKeyboardButton(text, callback_data=f"get_questions {i + 1}")
    employee_menu_button = telebot.types.InlineKeyboardButton("üí† –í –º–µ–Ω—é", callback_data='employee_menu')

    markup.add(*button_texts)
    markup.add(employee_menu_button)

    bot.send_message(message.chat.id, f"–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –≤–æ–ø—Ä–æ—Å–æ–≤:",
                     parse_mode='html', reply_markup=markup)


# –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º —Å–ø–∏—Å–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞ (–æ—Ç–∫—Ä—ã—Ç—ã–µ, –∑–∞–∫—Ä—ã—Ç—ã–µ, –≤—Å–µ)
@bot.callback_query_handler(func=lambda call: 'get_questions' in call.data)
def get_questions(call):
    message = call.message
    markup = telebot.types.InlineKeyboardMarkup(row_width=1)
    queries_posts = {'1': ("""SELECT user_id, date FROM messages WHERE status=1""", '‚ö†Ô∏è ', "opened"),
                     '2': ("""SELECT user_id, date FROM messages WHERE status=2""", '‚úÖ ', "closed")}
    if '1' in call.data[-1] or '2' in call.data[-1]:
        questions_ids = cur.execute(queries_posts[call.data[-1]][0]).fetchall()
        buttons = [
            telebot.types.InlineKeyboardButton(f"{queries_posts[call.data[-1]][1]}{x[1]}",
                                               callback_data=f"getqsts_{queries_posts[call.data[-1]][2]}_{x[0]}_{x[1]}")
            for x in questions_ids
        ]
        if '2' in call.data[-1]:
            buttons.append(telebot.types.InlineKeyboardButton(f"–£–¥–∞–ª–∏—Ç—å –∑–∞–∫—Ä—ã—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã",
                                                              callback_data='delete_closed_'))
    else:
        questions_ids = list(reversed(cur.execute("""SELECT user_id, date, status FROM messages""").fetchall()))
        questions_ids.sort(key=lambda x: x[2])
        buttons = [
            telebot.types.InlineKeyboardButton(f"{'‚ö†Ô∏è ' if x[2] == 1 else '‚úÖ '}{x[1]}",
                                               callback_data=f"getqsts_all_{x[0]}_{x[1]}") for x in questions_ids
        ]
    markup.add(*buttons)
    employee_menu_button = telebot.types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='help_student')
    markup.add(employee_menu_button)

    bot.send_message(message.chat.id, f"–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å:",
                     parse_mode='html', reply_markup=markup)


# –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º –∏ –≤–∏–∑—É–∞–ª—å–Ω—ã–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º
@bot.callback_query_handler(func=lambda call: 'getqsts_' in call.data)
def get_current_question(call):
    message = call.message
    markup = telebot.types.InlineKeyboardMarkup(row_width=1)
    status, user_id, date = call.data.split('_')[1:]
    total_msg = cur.execute(
        """SELECT from_user, to_user, status, talk_id FROM messages WHERE user_id=(?) AND date=(?)""",
        (int(user_id), date)).fetchone()  # –≤–æ–ø—Ä–æ—Å —Å—Ç—É–¥–µ–Ω—Ç–∞, –æ—Ç–≤–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞, —Å—Ç–∞—Ç—É—Å –≤–æ–ø—Ä–æ—Å–∞, —É–Ω–∏–∫–∞–ª—å–Ω—ã–π id
    user_msg = total_msg[0].split(splitter)  # –≤–æ–ø—Ä–æ—Å —Å—Ç—É–¥–µ–Ω—Ç–∞ —Ä–∞–∑–±–∏—Ç—ã–π –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º
    answer_msg = total_msg[1].split(splitter) if total_msg[1] else []  # –æ—Ç–≤–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ —Ä–∞–∑–±–∏—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ
    msg_text = f"–°—Ç–∞—Ç—É—Å –≤–æ–ø—Ä–æ—Å–∞: {'–í–æ–ø—Ä–æ—Å –æ—Ç–∫—Ä—ã—Ç' if total_msg[2] == 1 else '–í–æ–ø—Ä–æ—Å –∑–∞–∫—Ä—ã—Ç'}\n\n"  # —à–∞–ø–∫–∞ —Ç–µ–∫—Å—Ç–∞

    for i in range(len(user_msg)):  # –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
        msg_text += f'<b>–ß–∞—Å—Ç—å –≤–æ–ø—Ä–æ—Å–∞ ‚Ññ{i + 1}.</b> {user_msg[i]}\n\n'
        if i < len(answer_msg):
            msg_text += f'<b>–û—Ç–≤–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: </b><i>{answer_msg[i]}</i>\n\n' \
                if answer_msg[i] else '<b>–û—Ç–≤–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: </b><i>–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –µ—â–µ –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª.</i>'
    if len(answer_msg) > len(user_msg) and answer_msg[-1]:  # —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–∞–ø–∏—Å–∞–ª –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ => UPD
        msg_text += "<i>UPD:</i> " + '\n'.join(answer_msg[len(user_msg):len(answer_msg)])

    if status == 'opened' or status == 'all' and int(total_msg[2]) == 1:  # –∫–Ω–æ–ø–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
        answer_action = telebot.types.InlineKeyboardButton("–û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å",
                                                           callback_data=f"answer_on_{total_msg[3]}")
        close_action = telebot.types.InlineKeyboardButton("–ó–∞–∫—Ä—ã—Ç—å –≤–æ–ø—Ä–æ—Å",
                                                          callback_data=f"close_msg_e_{total_msg[3]}")
        markup.add(answer_action, close_action)

    elif status == 'closed':  # –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
        delete_action = telebot.types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å",
                                                           callback_data=f"delete_closed_{date}")
        markup.add(delete_action)
    employee_menu_button = telebot.types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='help_student')
    markup.add(employee_menu_button)

    # —É–º–Ω—ã–π —Å–ø–ª–∏—Ç –µ—Å–ª–∏ –≤–µ—Å—å –≤–æ–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
    for msg in telebot.util.smart_split(msg_text, 3000):
        if msg != telebot.util.smart_split(msg_text, 3000)[-1]:
            bot.send_message(message.chat.id, msg_text, parse_mode='html')
        else:
            bot.send_message(message.chat.id, msg_text, parse_mode='html', reply_markup=markup)


@bot.callback_query_handler(func=lambda call: 'answer_on_' in call.data)  # –æ—Ç–≤–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å
def answer_on(call):
    message = call.message
    markup = telebot.types.InlineKeyboardMarkup()
    stop_button = telebot.types.InlineKeyboardButton('–û—Ç–º–µ–Ω–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –æ—Ç–≤–µ—Ç–∞', callback_data='cancel_send_e')
    markup.add(stop_button)
    bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –≤ —á–∞—Ç", reply_markup=markup)
    bot.register_next_step_handler_by_chat_id(message.chat.id, save_answer, [call.data.split('_')[-1]])


def save_answer(message, chtid):  # —Ñ—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞
    markup = telebot.types.InlineKeyboardMarkup(row_width=1)
    menu = telebot.types.InlineKeyboardButton("üí† –í –º–µ–Ω—é", callback_data='employee_menu')
    markup.add(menu)

    shadow_markup = telebot.types.InlineKeyboardMarkup(row_width=1)
    archive = telebot.types.InlineKeyboardButton("–ê—Ä—Ö–∏–≤", callback_data='memory')
    shadow_markup.add(archive)

    talk_id = int(chtid[0])
    user_from, user_to, user_id, date = cur.execute("""SELECT from_user, to_user, user_id,
     date FROM messages WHERE talk_id=(?)""", (talk_id,)).fetchone()
    new_from = user_from + splitter if user_from and user_from[
                                                     len(user_from) - len(splitter):] != splitter else user_from
    if not user_to:  # —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –æ—Ç–≤–µ—á–∞–ª
        new_to = message.text
    elif user_to[len(user_to) - len(splitter):] == splitter:  # —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ —É–∂–µ –Ω–æ–≤—ã–π —Ä–∞–∑–¥–µ–ª
        new_to = user_to + message.text
    else:  # —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –¥–æ–ø–æ–ª–Ω–∏–ª –æ—Ç–≤–µ—Ç
        new_to = user_to + '\nUPD: ' + message.text

    cur.execute("""UPDATE messages SET from_user=(?), to_user=(?) WHERE talk_id=(?)""",
                (new_from, new_to, talk_id))
    con.commit()

    to_question = telebot.types.InlineKeyboardButton("–ö –≤–æ–ø—Ä–æ—Å—É", callback_data=f"get_msg_{date}")
    shadow_markup.add(to_question)

    bot.send_message(user_id, f"–ù–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å {date} –æ—Ç–≤–µ—Ç–∏–ª —Å–æ—Ç—Ä—É–¥–Ω–∏–∫. "
                              f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞—Ä—Ö–∏–≤ –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ —á–µ—Ä–µ–∑ '–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å' –∏–ª–∏ –∑–∞–∫—Ä–æ–π—Ç–µ –µ–≥–æ.",
                     reply_markup=shadow_markup)
    bot.send_message(message.chat.id, "–û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: 'delete_closed' in call.data)  # —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ –ë–î
def delete_closed(call):
    markup = telebot.types.InlineKeyboardMarkup(row_width=1)
    menu = telebot.types.InlineKeyboardButton("üí† –í –º–µ–Ω—é", callback_data='employee_menu')
    markup.add(menu)
    if not call.data.split("_")[-1]:
        cur.execute(
            """DELETE FROM messages WHERE status=(SELECT number FROM statuses WHERE status_name = '–í–æ–ø—Ä–æ—Å –∑–∞–∫—Ä—ã—Ç')""")
        con.commit()
        bot.send_message(call.message.chat.id, "–ó–∞–∫—Ä—ã—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã.", reply_markup=markup)
    else:
        date = call.data.split('_')[-1]
        cur.execute("""DELETE FROM messages WHERE status=(SELECT number FROM statuses WHERE status_name='–í–æ–ø—Ä–æ—Å –∑–∞–∫—Ä—ã—Ç') 
        AND date=(?)""", (date,))
        con.commit()
        bot.send_message(call.message.chat.id, f"–ó–∞–∫—Ä—ã—Ç—ã–π –≤–æ–ø—Ä–æ—Å {date} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: 'edit_menu' in call.data)
def edit_cats(call):
    message = call.message
    markup = telebot.types.InlineKeyboardMarkup(row_width=1)
    menu = telebot.types.InlineKeyboardButton("üí† –í –º–µ–Ω—é", callback_data='employee_menu')
    text = ('–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –ø—É–Ω–∫—Ç–æ–≤ –ø–æ–ª–æ–∂–µ–Ω–∏—è (–ø–æ –Ω–æ–º–µ—Ä—É) –∏ '
            '–∏—Ö –ª–æ–≥–∏—á–µ—Å–∫–∏–µ –≥—Ä—É–ø–ø—ã (—Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ). \n\n'
            '–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:')
    to_texts = telebot.types.InlineKeyboardButton('üì© –ü—É–Ω–∫—Ç –ø–æ–ª–æ–∂–µ–Ω–∏—è',
                                                  callback_data='edit_texts')
    to_groups = telebot.types.InlineKeyboardButton('üì¶ –õ–æ–≥–∏—á–µ—Å–∫—É—é –≥—Ä—É–ø–ø—É',
                                                   callback_data='edit_groups')
    markup.add(to_texts, to_groups, menu)
    bot.send_message(message.chat.id, text, reply_markup=markup, parse_mode='html')


@bot.callback_query_handler(func=lambda call: 'edit_texts' in call.data)
def edit_texts(call):
    message = call.message
    markup = telebot.types.InlineKeyboardMarkup(row_width=3)
    cancel_button = telebot.types.InlineKeyboardButton("üî¥ –û—Ç–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ",
                                                       callback_data='cancel_send_e')
    add_button = telebot.types.InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –ø—É–Ω–∫—Ç", callback_data='addnew_text')

    all_texts = {x[0]: x[1] for x in sorted(cur.execute('''SELECT number, text FROM categories''').fetchall(),
                                            key=lambda x: int(x[0].split('.')[0]))}
    total_text = '<b>–¢–µ–∫—É—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: </b>\n\n' + ';\n\n'.join(f'<i>{key})</i> {all_texts[key]}'
                                                                 for key in all_texts.keys())
    for txt in telebot.util.smart_split(total_text, 4000):
        bot.send_message(message.chat.id, txt, parse_mode='html')
    markup.add(*[telebot.types.InlineKeyboardButton(key, callback_data=f'edit_number_{key}')
                 for key in all_texts.keys()])
    markup.add(add_button)
    markup.add(cancel_button)
    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª–µ–µ –Ω–æ–º–µ—Ä –ø—É–Ω–∫—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:', reply_markup=markup)


@bot.callback_query_handler(func=lambda call: 'edit_number_' in call.data)
def edit_current_text(call):
    message, text_number, db_text = (call.message, call.data.split('_')[-1],
                                     cur.execute('''SELECT text FROM categories WHERE number=?''',
                                                 (call.data.split('_')[-1],)).fetchone()[0])
    markup = telebot.types.InlineKeyboardMarkup(row_width=2)
    delete_button = telebot.types.InlineKeyboardButton(f'üßπ –£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é ‚Ññ{text_number}',
                                                       callback_data=f'delete_number_{text_number}')
    cancel_button = telebot.types.InlineKeyboardButton('üî¥ –û—Ç–º–µ–Ω–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É',
                                                       callback_data='cancel_send_e')
    markup.add(delete_button, cancel_button)
    bot.send_message(message.chat.id, f'–°—Ç–∞—Ä—ã–π —Ç–µ–∫—Å—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–∏–Ω–∏–π —Ç–µ–∫—Å—Ç, —á—Ç–æ–±—ã c–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å):\n\n'
                                      f'<code>{db_text}</code>.\n\n'
                                      f'–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –æ–Ω–æ –±—É–¥–µ—Ç –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω–æ:',
                     parse_mode='html',
                     reply_markup=markup)
    bot.register_next_step_handler_by_chat_id(message.chat.id, edit_current_number, text_number)


def edit_current_number(message, text_number):
    cur.execute('''UPDATE categories SET text=? WHERE number=?''', (message.text, text_number))
    con.commit()

    markup = telebot.types.InlineKeyboardMarkup(row_width=1)
    employee_menu_button = telebot.types.InlineKeyboardButton("üí† –í –º–µ–Ω—é", callback_data='employee_menu')
    edit_menu_button = telebot.types.InlineKeyboardButton("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data='edit_menu')
    markup.add(edit_menu_button, employee_menu_button)

    bot.send_message(message.chat.id, f'–¢–µ–ø–µ—Ä—å –∫–∞—Ç–µ–≥–æ—Ä–∏—è ‚Ññ{text_number} –∏–º–µ–µ—Ç —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:\n\n'
                                      f'<b>{message.text}</b>\n\n'
                                      f'–ù–µ –∑–∞–±—É–¥—å—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ, '
                                      f'–ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫ –ª–æ–≥–∏—á–µ—Å–∫–æ–π –≥—Ä—É–ø–ø–µ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –≤–∫–ª–∞–¥–∫–µ.',
                     reply_markup=markup, parse_mode='html')


@bot.callback_query_handler(func=lambda call: 'delete_number_' in call.data)
def del_number(call):
    message, text_number = call.message, call.data.split('_')[-1]
    cur.execute("""DELETE FROM categories WHERE number=?""", (text_number,))
    con.commit()

    bot.clear_step_handler_by_chat_id(message.chat.id)

    markup = telebot.types.InlineKeyboardMarkup(row_width=1)
    employee_menu_button = telebot.types.InlineKeyboardButton("üí† –í –º–µ–Ω—é", callback_data='employee_menu')
    edit_menu_button = telebot.types.InlineKeyboardButton("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data='edit_menu')
    markup.add(edit_menu_button, employee_menu_button)

    bot.send_message(message.chat.id, f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è ‚Ññ{text_number} –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.', reply_markup=markup)


@bot.callback_query_handler(func=lambda call: 'addnew_text' in call.data)
def add_new_text(call):
    message = call.message
    markup = telebot.types.InlineKeyboardMarkup(row_width=1)
    cancel_button = telebot.types.InlineKeyboardButton('üî¥ –û—Ç–º–µ–Ω–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É',
                                                       callback_data='cancel_send_e')
    markup.add(cancel_button)
    bot.send_message(message.chat.id, f'–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å:', reply_markup=markup)
    bot.register_next_step_handler_by_chat_id(message.chat.id, register_new_cat)


def register_new_cat(message):
    markup = telebot.types.InlineKeyboardMarkup(row_width=1)
    employee_menu_button = telebot.types.InlineKeyboardButton("üí† –í –º–µ–Ω—é", callback_data='employee_menu')
    cancel_button = telebot.types.InlineKeyboardButton('üî¥ –û—Ç–º–µ–Ω–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É',
                                                       callback_data='cancel_send_e')
    if message.text.strip().split('.')[0].isnumeric():
        markup.add(cancel_button)
        text_number = message.text.strip()
        bot.send_message(message.chat.id, f'–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ‚Ññ{text_number}. '
                                          f'–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', reply_markup=markup)
        bot.register_next_step_handler_by_chat_id(message.chat.id, add_new_number_with_text, text_number)
    else:
        markup.add(employee_menu_button)
        bot.send_message(message.chat.id, f'–í–∞—à –æ—Ç–≤–µ—Ç: "{message.text}" –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–æ–º–µ—Ä–æ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. '
                                          f'–ü—Ä–∏–º–µ—Ä –Ω–æ–º–µ—Ä–∞: "12" –∏–ª–∏ "12.3".\n\n–í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ.',
                         reply_markup=markup)


def add_new_number_with_text(message, text_number):
    cur.execute('INSERT INTO categories(number, text) VALUES (?, ?)',
                (text_number, message.text.strip().strip('.')))
    con.commit()

    markup = telebot.types.InlineKeyboardMarkup(row_width=1)
    employee_menu_button = telebot.types.InlineKeyboardButton("üí† –í –º–µ–Ω—é", callback_data='employee_menu')
    edit_menu_button = telebot.types.InlineKeyboardButton("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data='edit_menu')
    markup.add(edit_menu_button, employee_menu_button)

    bot.send_message(message.chat.id, f'–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è ‚Ññ{text_number}:\n\n'
                                      f'<i>{message.text.strip().strip(".")}</i>\n\n'
                                      f'–í—ã –º–æ–∂–µ—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –µ—ë –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º —Ä–∞–∑–¥–µ–ª–µ.',
                     reply_markup=markup, parse_mode='html')


@bot.callback_query_handler(func=lambda call: call.data == 'edit_groups')
def edit_groups(call):
    message = call.message

    markup = telebot.types.InlineKeyboardMarkup(row_width=2)
    written_groups = {x[0]: x[1] for x in cur.execute('''SELECT group_name, text_id FROM cat_groups''').fetchall()}

    markup.add(*[telebot.types.InlineKeyboardButton(key, callback_data=f'edit_group_{key}')
                 for key in written_groups.keys()])
    employee_menu_button = telebot.types.InlineKeyboardButton("üí† –í –º–µ–Ω—é", callback_data='employee_menu')
    append_group_button = telebot.types.InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é", callback_data='append_group')
    markup.add(append_group_button)
    markup.add(employee_menu_button)

    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ, –ª–∏–±–æ –≥—Ä—É–ø–ø—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:',
                     reply_markup=markup)


@bot.callback_query_handler(func=lambda call: 'edit_group_' in call.data)
def edit_current_group(call):
    message, group_name = call.message, call.data.split('_')[-1]
    markup = telebot.types.InlineKeyboardMarkup(row_width=1)

    rename_group_button = telebot.types.InlineKeyboardButton("üìù –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å",
                                                             callback_data=f'rename_group_{group_name}')
    edit_categories_in_group_button = telebot.types.InlineKeyboardButton("‚ÑπÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏–µ",
                                                                         callback_data=f'edit_cats_in_group_'
                                                                                       f'{group_name}')
    delete_group_button = telebot.types.InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å",
                                                             callback_data=f'delete_group_{group_name}')

    back_button = telebot.types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='edit_groups')
    menu_button = telebot.types.InlineKeyboardButton("üí† –í –º–µ–Ω—é", callback_data='employee_menu')

    markup.add(edit_categories_in_group_button, rename_group_button,
               delete_group_button, back_button, menu_button)

    bot.send_message(message.chat.id, f'<b>{group_name}</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –≥—Ä—É–ø–ø–æ–π:',
                     reply_markup=markup, parse_mode='html')


@bot.callback_query_handler(func=lambda call: 'rename_group_' in call.data)
def rename_group(call):
    message = call.message
    prev_name = call.data.split('_')[-1]

    markup = telebot.types.InlineKeyboardMarkup(row_width=1)
    cancel_button = telebot.types.InlineKeyboardButton('üî¥ –û—Ç–º–µ–Ω–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É',
                                                       callback_data='cancel_send_e')
    markup.add(cancel_button)
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã:', reply_markup=markup)

    bot.register_next_step_handler_by_chat_id(message.chat.id, register_new_name, prev_name)


def register_new_name(message, prev_name):
    cur.execute('UPDATE cat_groups SET group_name=? WHERE group_name=?', (message.text, prev_name))
    con.commit()

    markup = telebot.types.InlineKeyboardMarkup(row_width=2)
    back_button = telebot.types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='edit_groups')
    employee_menu_button = telebot.types.InlineKeyboardButton("üí† –í –º–µ–Ω—é", callback_data='employee_menu')
    markup.add(back_button, employee_menu_button)
    bot.send_message(message.chat.id, f'–ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã {prev_name} –±—ã–ª–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {message.text}.',
                     reply_markup=markup)


@bot.callback_query_handler(func=lambda call: 'delete_group_' in call.data)
def delete_group(call):
    group_name, message = call.data.split('_')[-1], call.message

    cur.execute('''DELETE FROM cat_groups WHERE group_name=?''', (group_name,))
    con.commit()

    markup = telebot.types.InlineKeyboardMarkup(row_width=2)
    back_button = telebot.types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='edit_groups')
    menu_button = telebot.types.InlineKeyboardButton("üí† –í –º–µ–Ω—é", callback_data='employee_menu')
    markup.add(back_button, menu_button)

    bot.send_message(message.chat.id, f'–ì—Ä—É–ø–ø–∞ {group_name} –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞.',
                     reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == 'append_group')
def append_group(call):
    message = call.message

    markup = telebot.types.InlineKeyboardMarkup(row_width=1)
    cancel_button = telebot.types.InlineKeyboardButton('üî¥ –û—Ç–º–µ–Ω–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É',
                                                       callback_data='cancel_send_e')
    markup.add(cancel_button)

    bot.send_message(message.chat.id, f'–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å: ',
                     reply_markup=markup)
    bot.register_next_step_handler_by_chat_id(message.chat.id, register_new_group)


def register_new_group(message):
    message.text = message.text.replace('<', '').replace('>', '').replace('_', '')
    cur.execute("""INSERT INTO cat_groups (group_name) VALUES (?)""", (message.text,))
    con.commit()

    markup = telebot.types.InlineKeyboardMarkup(row_width=2)
    add_texts_button = telebot.types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏–µ",
                                                          callback_data=f'edit_cats_in_group_{message.text}')
    back_button = telebot.types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='edit_groups')
    menu_button = telebot.types.InlineKeyboardButton("üí† –í –º–µ–Ω—é", callback_data='employee_menu')
    markup.add(add_texts_button)
    markup.add(back_button, menu_button)

    bot.send_message(message.chat.id, f'–ì—Ä—É–ø–ø–∞ {message.text} –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞.',
                     reply_markup=markup)


@bot.callback_query_handler(lambda call: 'edit_cats_in_group_' in call.data)
def edit_cats_in_group(call):
    message, group_name = call.message, call.data.split('_')[-1]

    markup = telebot.types.InlineKeyboardMarkup(row_width=2)
    add_points_button = telebot.types.InlineKeyboardButton('‚ûï –ó–∞–¥–∞—Ç—å –Ω–æ–≤—ã–µ –ø—É–Ω–∫—Ç—ã',
                                                           callback_data=f'add_points_INSERT_{group_name}')
    append_points_button = telebot.types.InlineKeyboardButton('üì® –î–æ–ø–æ–ª–Ω–∏—Ç—å –ø—É–Ω–∫—Ç—ã',
                                                              callback_data=f'add_points_UPDATE_{group_name}')
    list_of_categories = telebot.types.InlineKeyboardButton('–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—É–Ω–∫—Ç–æ–≤',
                                                            callback_data=f'get_texts_{group_name}')
    back_button = telebot.types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='edit_groups')
    menu_button = telebot.types.InlineKeyboardButton("üí† –í –º–µ–Ω—é", callback_data='employee_menu')
    markup.add(list_of_categories)

    text_ids = cur.execute("""SELECT text_id FROM cat_groups WHERE group_name=?""",
                           (group_name,)).fetchone()[0]
    if text_ids:
        markup.add(add_points_button, append_points_button, back_button, menu_button)
        text_ids = text_ids.split(', ')
        send_text = ["<b>–¢–µ–∫—É—â–µ–µ –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã: </b>"]
        for t_id in text_ids:
            try:
                send_text.append(f'<i>{t_id}</i>: ' + cur.execute("""SELECT text FROM categories WHERE number=?""",
                                                                  (t_id,)).fetchone()[0])
            except (IndexError or AttributeError):
                continue
    else:
        markup.add(back_button, add_points_button, menu_button)
        send_text = ['<i>–ù–µ—Ç –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö –≤ –≥—Ä—É–ø–ø—É –ø—É–Ω–∫—Ç–æ–≤.</i>']
    send_text = telebot.util.smart_split('\n\n'.join(send_text), 3000)
    for i, text in enumerate(send_text):
        if i == len(send_text) - 1:
            bot.send_message(message.chat.id, f'{text}\n\n  <b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>',
                             reply_markup=markup, parse_mode='html')
        elif i == 0:
            bot.send_message(message.chat.id, f'–¢–µ–∫—É—â–µ–µ –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã:\n\n{text}',
                             parse_mode='html')
        else:
            bot.send_message(message.chat.id, f'{text}', parse_mode='html')


@bot.callback_query_handler(func=lambda call: 'get_texts_' in call.data)
def get_texts(call):
    group_name, message = call.data.split('_')[-1], call.message
    markup = telebot.types.InlineKeyboardMarkup(row_width=2)
    add_points_button = telebot.types.InlineKeyboardButton('‚ûï –ó–∞–¥–∞—Ç—å –Ω–æ–≤—ã–µ –ø—É–Ω–∫—Ç—ã',
                                                           callback_data=f'add_points_INSERT_{group_name}')
    append_points_button = telebot.types.InlineKeyboardButton('üì® –î–æ–ø–æ–ª–Ω–∏—Ç—å –ø—É–Ω–∫—Ç—ã',
                                                              callback_data=f'add_points_UPDATE_{group_name}')

    back_button = telebot.types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='edit_groups')
    menu_button = telebot.types.InlineKeyboardButton("üí† –í –º–µ–Ω—é", callback_data='employee_menu')
    markup.add(add_points_button, append_points_button, back_button, menu_button)

    texts = [f'{x[0]}: {x[1]}' for x in cur.execute("""SELECT * FROM categories""").fetchall()]
    total_text = telebot.util.smart_split('\n\n'.join(texts), 3000)
    for i, text in enumerate(total_text):
        if i == len(total_text) - 1:
            bot.send_message(message.chat.id, f'{text}\n\n  <b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>',
                             reply_markup=markup, parse_mode='html')
        else:
            bot.send_message(message.chat.id, f'{text}', parse_mode='html')


@bot.callback_query_handler(func=lambda call: 'add_points_' in call.data)
def add_points(call):
    message, add_type, group_name = call.message, call.data.split('_')[-2], call.data.split('_')[-1]
    markup = telebot.types.InlineKeyboardMarkup(row_width=1)
    cancel_button = telebot.types.InlineKeyboardButton('üî¥ –û—Ç–º–µ–Ω–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É',
                                                       callback_data='cancel_send_e')
    markup.add(cancel_button)

    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –ø—É–Ω–∫—Ç–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é. –û–Ω–∏ –±—É–¥—É—Ç –∑–∞–ø–∏—Å–∞–Ω—ã –≤ –≥—Ä—É–ø–ø—É:\n\n'
                                      '<i>–û—Ç–ø—Ä–∞–≤—å—Ç–µ 0, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –ø—É–Ω–∫—Ç—ã –∏–∑ –≥—Ä—É–ø–ø—ã</i>\n',
                     reply_markup=markup, parse_mode='html')

    bot.register_next_step_handler_by_chat_id(message.chat.id, register_add_points, group_name, add_type)


def register_add_points(message, group_name, add_type):
    markup = telebot.types.InlineKeyboardMarkup(row_width=2)
    back_button = telebot.types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='edit_groups')
    menu_button = telebot.types.InlineKeyboardButton("üí† –í –º–µ–Ω—é", callback_data='employee_menu')
    markup.add(back_button, menu_button)

    if message.text != '0':
        clear_text = ', '.join([t_id.strip() for t_id in message.text.strip(',').strip().split(',')])
        if add_type == 'INSERT':
            cur.execute('''UPDATE cat_groups SET text_id=? WHERE group_name=?''', (clear_text, group_name))
            con.commit()
        elif add_type == 'UPDATE':
            prev_ids = cur.execute('''SELECT text_id FROM cat_groups WHERE group_name=?''',
                                   (group_name,)).fetchone()[0]
            prev_ids = '' if not prev_ids else prev_ids
            cur.execute('''UPDATE cat_groups SET text_id=? WHERE group_name=?''',
                        (prev_ids + ', ' + clear_text, group_name))
            con.commit()
        bot.send_message(message.chat.id, f'–¢–µ–ø–µ—Ä—å –≤–∞—à–∞ –≥—Ä—É–ø–ø–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤ —Å–µ–±–µ –ø—É–Ω–∫—Ç—ã '
                                          f'{cur.execute("""SELECT text_id FROM cat_groups WHERE group_name=?""", (group_name,)).fetchone()[0]}.',
                         reply_markup=markup)
    else:
        cur.execute('''UPDATE cat_groups SET text_id=NULL WHERE group_name=?''', (group_name,))
        con.commit()

        bot.send_message(message.chat.id, '–ü—É–Ω–∫—Ç—ã –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã –∏–∑ –≥—Ä—É–ø–ø—ã.', reply_markup=markup)


bot.infinity_polling(skip_pending=True)  # –±–µ—Å–∫–æ–Ω–µ—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –±–æ—Ç–∞
# –ú–∞–∫—Å–∏–º –©–∏–ª–∫–æ 2024 https://vk.com/m.shilko
